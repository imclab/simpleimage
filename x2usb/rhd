#!/bin/bash
# Create a Recovery HD for use with Virtualbox etc
declare -r WORKING_DIR=$(pwd)
BaseSystem_DMG="/Volumes/OS X Install ESD/BaseSystem.dmg"
Template_PLIST="${WORKING_DIR}/template.plist"

function usage() {
#clear
cat <<EOF

	Usage:
	sudo $(basename "$0")
	sudo $(basename "$0") PATH_TO_ESD --iso

	Description:
	Creates a Recovery HD dmg using Apple's BaseSystem.dmg

	Requirements:
	- Valid Apple InstallESD.dmg

	Optional:
	- template.plist

EOF
}

function XIT () {
	echo "Exiting"
	sleep 5
	hdiutil detach "${BaseSystem_MKTEMP}" -force
	hdiutil detach "/Volumes/OS X Install ESD" -force
	sleep 5
	rm -Rf "${BaseSystem_MKTEMP}"
	rm -Rf "${BaseSystem_MKTEMP}.dmg"
	exit ${1}
}

# must sudo
if [ $(id -u) -ne 0 ]; then
	echo "Run this script with sudo."
	exit 1
fi

# must provide arguments OR a template.plist file
if [ $# -eq 0 ]; then
	# check for a template as an alternative to using arguments, assume iso is yes.
	if [ -e "${Template_PLIST}" ]; then
		echo "template.plist found."
		export InstallESD_DMG=$(defaults read ${WORKING_DIR}/template.plist Source)
	else
		usage
	fi
else
	# some arguments provided so they will override an existing template.plist
	# installesd.dmg
	if [ ! -z ${1} ]; then
		if [ -e ${1} ]; then
			export InstallESD_DMG="${1}"
		else
			echo "InstallESD.dmg path does not seem valid, so exiting"
			exit 1
		fi
	fi
	# convert Recovery HD dmg to iso for Virtualbox testing?
	if [ ! -z ${2} ]; then
		if [ ${2} == "--iso" ]; then
			ISO=1
		fi
	fi
fi

Output_Directory=$(dirname "${InstallESD_DMG}")
echo ${InstallESD_DMG}
echo ${Output_Directory}

# mount InstallESD source
hdiutil attach "${InstallESD_DMG}" -nobrowse -owners on
if [ $? -ne 0 ]; then
	echo "Could not mount ${InstallESD_DMG} so exiting"
	XIT 1
else
	sleep 5
	echo "Mounted ${InstallESD_DMG} to copy BaseSystem.dmg"
fi

# copy the hidden BaseSystem.dmg from the root of InstallESD.dmg to output directory as RW
if [ -e "${BaseSystem_DMG}" ]; then
	BaseSystem_MKTEMP="$(mktemp -d /tmp/BaseSystem_MKTEMP.XXXX)"
	echo "Converting ${BaseSystem_DMG} to RW at ${BaseSystem_MKTEMP}"
	sudo hdiutil convert -format UDRW -o "${BaseSystem_MKTEMP}" "${BaseSystem_DMG}"
	if [ $? -ne 0 ]; then
		echo "Unable to convert ${BaseSystem_DMG} to RW at ${BaseSystem_MKTEMP}"
		XIT 1
	else
		sleep 5
		echo "Detaching /Volumes/OS X Install ESD since we have BaseSystem.dmg in temp now."
		hdiutil detach "/Volumes/OS X Install ESD" -force
		echo "Attaching ${BaseSystem_MKTEMP}.dmg to ${BaseSystem_MKTEMP}"
		hdiutil attach "${BaseSystem_MKTEMP}.dmg" -mountpoint "${BaseSystem_MKTEMP}" -nobrowse -owners on
		if [ $? -ne 0 ]; then
			echo "Unable to mount ${BaseSystem_MKTEMP}.dmg to ${BaseSystem_MKTEMP}"
			XIT 1
		fi
	fi
else
	echo "${BaseSystem_DMG} not found, unable to copy. Exiting."
fi

# rename temp BaseSystem.dmg VOLUME
# probably need something smarter here to detect /dev/disks etc
echo "Trying to rename /Volumes/OS X Base System to Custom OS X Base System"
sudo diskutil rename "OS X Base System" "Custom OS X Base System"

# convert the temp dmg to output directory
OS_Version=$(defaults read "${BaseSystem_MKTEMP}/System/Library/CoreServices/SystemVersion" ProductVersion)	# 10.9.2 etc
OS_Build=$(defaults read "${BaseSystem_MKTEMP}/System/Library/CoreServices/SystemVersion" ProductBuildVersion) # 13A603 etc

sleep 5
echo "detaching ${BaseSystem_MKTEMP}"
hdiutil detach "${BaseSystem_MKTEMP}" -force

if [ ! -e "${Output_Directory}/RecoveryHD_${OS_Version}_${OS_Build}.dmg" ]; then
	echo "Converting ${BaseSystem_MKTEMP}.dmg to ${Output_Directory}/RecoveryHD_${OS_Version}_${OS_Build}.dmg"
	sudo hdiutil convert -format UDZO -o "${Output_Directory}/RecoveryHD_${OS_Version}_${OS_Build}.dmg" "${BaseSystem_MKTEMP}.dmg"
	if [ $? -ne 0 ]; then
		echo "Unable to convert ${BaseSystem_MKTEMP}.dmg to ${Output_Directory}/RecoveryHD_${OS_Version}_${OS_Build}.dmg"
		XIT 1
	else
		sleep 5
		rm -Rf "${BaseSystem_MKTEMP}"
		rm -Rf "${BaseSystem_MKTEMP}.dmg"
		sudo asr imagescan --source ${Output_Directory}/RecoveryHD_${OS_Version}_${OS_Build}.dmg
		if [ $? -ne 0 ]; then
			echo "asr scan for restore failed."
		fi
	fi
else
	# move this higher up, no sense performing all the actions up to this point if its going to fail.
	# TODO
	echo "${Output_Directory}/RecoveryHD_${OS_Version}_${OS_Build}.dmg already exists. Exiting."
	XIT 1
fi

if [[ $ISO = 1 ]]; then
   OUTPUT_ISO="${Output_Directory}/RecoveryHD_${OS_Version}_${OS_Build}.iso"
   hdiutil convert "${Output_Directory}/RecoveryHD_${OS_Version}_${OS_Build}.dmg" -format UDTO -o "$OUTPUT_ISO"
fi

exit 0