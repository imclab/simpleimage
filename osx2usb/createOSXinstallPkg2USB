#!/bin/bash
declare -r WORKING_DIR=$(pwd)

function usage() {
clear
cat <<EOF

	Usage:
	sudo $(basename "$0") "/VOLUMES/USBVOLUME"

	Description:
	Creates a bootable USB drive based on Apple's BaseSystem.dmg "recovery hd".
	The GUI is customised to provide the user the ability to install a custom OSX built on
	Greg Neagle's createOSXinstallPkg script.

	Requirements:
	- https://code.google.com/p/munki.installlionpkg
	- Valid xml.plist for createOSXinstallPkg as per the README.txt
	- Valid Apple InstallESD.dmg
	- USB drive large enough to hold the InstallOSX.pkg 

EOF
}

function XIT () {
	echo "Exiting"
	sleep 5
	hdiutil detach "${BaseSystem_MKTEMP}" -force
	hdiutil detach "/Volumes/OS X Install ESD" -force
	sleep 5
	rm -Rf "${BaseSystem_MKTEMP}"
	rm -Rf "${BaseSystem_MKTEMP}.dmg"
	exit ${1}

}

# must sudo
if [ $(id -u) -ne 0 ]; then
	echo "Run this script with sudo."
	exit 1
fi

if [ $# -eq 0 ]; then
	usage
	exit 1
fi

# check for specified USB
# make this a little nicer
if [ ! -e ${1} ]; then
	echo "Specified USB volume not found. Exiting."
	exit 1
fi

# maybe git clone if its missing? or give the option to. but for now just exit and provide stdout
if [ ! -e ${WORKING_DIR}/createOSXinstallPkg ]; then
	echo "createOSXinstallPkg not found get it here https://code.google.com/p/munki.installlionpkg/  ...exiting"
	exit 1
fi

# template.plist must exist.
# Refer to Greg's README.txt with regard to using createOSXinstallPkg with an "Example plist:"
# I've done it this way to keep my script simple.
[[ ! -e ${WORKING_DIR}/template.plist ]] && exit 1 || echo "template.plist found."

#defaults read ${WORKING_DIR}/template.plist

InstallESD_DMG=$(defaults read ${WORKING_DIR}/template.plist Source)
BaseSystem_DMG="/Volumes/OS X Install ESD/BaseSystem.dmg"
Output_PKG=$(dirname `defaults read ${WORKING_DIR}/template.plist Output`)

# mount InstallESD source
hdiutil attach "${InstallESD_DMG}" -nobrowse -owners on
if [ $? -ne 0 ]; then
	echo "Could not mount ${InstallESD_DMG} so exiting"
	XIT 1
else
	sleep 5
	echo "Mounted ${InstallESD_DMG} to copy BaseSystem.dmg"
fi

# copy the hidden BaseSystem.dmg from the root of InstallESD.dmg to output directory as RW
if [ -e "${BaseSystem_DMG}" ]; then
	BaseSystem_MKTEMP="$(mktemp -d /tmp/BaseSystem_MKTEMP.XXXX)"
	echo "Converting ${BaseSystem_DMG} to RW at ${BaseSystem_MKTEMP}"
	sudo hdiutil convert -format UDRW -o "${BaseSystem_MKTEMP}" "${BaseSystem_DMG}"
	if [ $? -ne 0 ]; then
		echo "Unable to convert ${BaseSystem_DMG} to RW at ${BaseSystem_MKTEMP}"
		XIT 1
	else
		sleep 5
		echo "Detaching /Volumes/OS X Install ESD since we have BaseSystem.dmg in temp now."
		hdiutil detach "/Volumes/OS X Install ESD" -force
		echo "Attaching ${BaseSystem_MKTEMP}.dmg to ${BaseSystem_MKTEMP}"
		hdiutil attach "${BaseSystem_MKTEMP}.dmg" -mountpoint "${BaseSystem_MKTEMP}" -nobrowse -owners on
		if [ $? -ne 0 ]; then
			echo "Unable to mount ${BaseSystem_MKTEMP}.dmg to ${BaseSystem_MKTEMP}"
			XIT 1
		fi
	fi
else
	echo "${BaseSystem_DMG} not found, unable to copy. Exiting."
fi

# rename temp BaseSystem.dmg VOLUME
# probably need something smarter here to detect /dev/disks etc
USBVolumeName="createOSXinstallPkg2USB"
echo "Trying to rename /Volumes/OS X Base System to ${USBVolumeName}"
sudo diskutil rename "OS X Base System" "${USBVolumeName}"

# Mod the GUI
GUI="${BaseSystem_MKTEMP}/System/Installation/CDIS/OS X Utilities.app"

# Add a custom icon
echo "Customising ${BaseSystem_MKTEMP} icon resources."
sudo ditto "${BaseSystem_MKTEMP}/System/Library/CoreServices/Installer.app/Contents/Resources/package.icns" "${GUI}/Contents/Resources/package.icns"

# Add an entry for our Enteprise install
echo "Customising ${BaseSystem_MKTEMP} GUI resources."
sudo /usr/libexec/PlistBuddy -c "add Buttons:0 dict" "${GUI}/Contents/Resources/Utilities.plist"
sudo /usr/libexec/PlistBuddy -c "add Buttons:0:BundlePath string" "${GUI}/Contents/Resources/Utilities.plist"
sudo /usr/libexec/PlistBuddy -c "set Buttons:0:BundlePath /Applications/Utilities/Terminal.app" "${GUI}/Contents/Resources/Utilities.plist"
sudo /usr/libexec/PlistBuddy -c "add Buttons:0:DescriptionKey string" "${GUI}/Contents/Resources/Utilities.plist"
sudo /usr/libexec/PlistBuddy -c "set Buttons:0:DescriptionKey Reinstall OS X using createOSXinstallPkg." "${GUI}/Contents/Resources/Utilities.plist"
sudo /usr/libexec/PlistBuddy -c "add Buttons:0:IconName string" "${GUI}/Contents/Resources/Utilities.plist"
sudo /usr/libexec/PlistBuddy -c "set Buttons:0:IconName package.icns" "${GUI}/Contents/Resources/Utilities.plist"
sudo /usr/libexec/PlistBuddy -c "add Buttons:0:Path string" "${GUI}/Contents/Resources/Utilities.plist"
sudo /usr/libexec/PlistBuddy -c "set Buttons:0:Path /Applications/Utilities/Terminal.app/Contents/MacOS/Terminal /createOSXinstallPkgMenu" "${GUI}/Contents/Resources/Utilities.plist"
sudo /usr/libexec/PlistBuddy -c "add Buttons:0:TitleKey string" "${GUI}/Contents/Resources/Utilities.plist"
sudo /usr/libexec/PlistBuddy -c "set Buttons:0:TitleKey Reinstall OS X for Enterprise" "${GUI}/Contents/Resources/Utilities.plist"

# Modify Apple description.
sudo /usr/libexec/PlistBuddy -c "set Buttons:2:DescriptionKey Reinstall a new copy of OS X from Apple." "${GUI}/Contents/Resources/Utilities.plist"

# convert the temp dmg to output directory
OperatingSystemVersion=$(defaults read "${BaseSystem_MKTEMP}/System/Library/CoreServices/SystemVersion" ProductVersion)	# 10.9.2 etc
OperatingSystemBuild=$(defaults read "${BaseSystem_MKTEMP}/System/Library/CoreServices/SystemVersion" ProductBuildVersion) # 13A603 etc

sleep 5
echo "detaching ${BaseSystem_MKTEMP}"
hdiutil detach "${BaseSystem_MKTEMP}" -force

say "detaching ${BaseSystem_MKTEMP}"
		exit

if [ ! -e "${Output_PKG}/InstallOSX_${OperatingSystemVersion}_${OperatingSystemBuild}.dmg" ]; then
	echo "Converting ${BaseSystem_MKTEMP}.dmg to ${Output_PKG}/InstallOSX_${OperatingSystemVersion}_${OperatingSystemBuild}.dmg"
	sudo hdiutil convert -format UDZO -o "${Output_PKG}/InstallOSX_${OperatingSystemVersion}_${OperatingSystemBuild}.dmg" "${BaseSystem_MKTEMP}.dmg"
	if [ $? -ne 0 ]; then
		echo "Unable to convert ${BaseSystem_MKTEMP}.dmg to ${Output_PKG}/InstallOSX_${OperatingSystemVersion}_${OperatingSystemBuild}.dmg"
		XIT 1
	else
		sleep 5
		sudo asr imagescan --source ${Output_PKG}/InstallOSX_${OperatingSystemVersion}_${OperatingSystemBuild}.dmg
		if [ $? -ne 0 ]; then
			echo "asr scan for restore failed."
		fi
	fi
else
	# move this higher up, no sense performing all the actions up to this point if its going to fail.
	echo "${Output_PKG}/InstallOSX_${OperatingSystemVersion}_${OperatingSystemBuild}.dmg already exists. Exiting."
	XIT 1
fi

# should I echo a bigger WARNING here? maybe...although asr does ask the tech to confirm.
echo "Restoring ${Output_PKG}/InstallOSX_${OperatingSystemVersion}_${OperatingSystemBuild}.dmg to ${1}"
sudo asr -restore -source "${Output_PKG}/InstallOSX_${OperatingSystemVersion}_${OperatingSystemBuild}.dmg" -target "${1}" -erase -format HFS+ -noverify

# copy some recources to the USB device
echo "Restoring ${Output_PKG}/InstallOSX_${OperatingSystemVersion}_${OperatingSystemBuild}.dmg to ${1}"
sudo cp "${WORKING_DIR}/bash_profile" "/Volumes/${USBVolumeName}/var/root/.bash_profile"
sudo mkdir /Volumes/${USBVolumeName}/INSTALL

# create InstallOSX_x.x.x_xxxxx.pkg
sudo ${WORKING_DIR}/createOSXinstallPkg --plist ${WORKING_DIR}/template.plist

# copy is to the USB
sudo cp -Rf "${Output_PKG}" /Volumes/${USBVolumeName}/INSTALL/

exit 0